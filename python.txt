# Class 생성
class Node:
    def __init__(self, x, y):
        self.x = x
        self.y = y
        self.val = 0


# str 16진수 -> 10진수
str = A14F90
answer = int(str, 16)


# 대,소문자 변환
s.upper()
s.lower()


# String 불러오기 (알파벳, 숫자, 대소문자 모두)
import string 

string.ascii_lowercase # 소문자 abcdefghijklmnopqrstuvwxyz
string.ascii_uppercase # 대문자 ABCDEFGHIJKLMNOPQRSTUVWXYZ
string.ascii_letters # 대소문자 모두 abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ
string.digits # 숫자 0123456789

# 문자열 제거 or 변경(replace)
input = "my name is noa"
input = input.replace("my", "your")

print(input) ------> your name is noa


# 문자열 제거 or 변경(join)
string = "Hey! What's up?"
characters = "'!?"

string = ''.join( x for x in string if x not in characters)
print(string) ------> Hey Whats up


# string type 처리

- char list -> str
new_str = ''.join(str_list)

- save after sort
new_str = ''.join(sorted(str_list))
new_str = ''.join(sorted(str_list, reverse = True))

- char to num(알파벳 크기 )
num = ord(c)





# for loop

- basic
for i in range(n) : <------------ 0 부터 n-1 까지

- with list
data = [1, 2, 3]
for item in data : <----------item에 data[0], data[1] ... 이 대입




# list

- insert
list.insert(idx, val)


- pop & remove
list.pop(by idx)
list.pop(-1) <--------제일 마지막 idx
list.remove(by value)


- 복사 (얕은 / 깊은 복사)
> 얕은 복사(를 하게되면 b의 vaule를 바꿀 때 a의 value도 바뀐다)
  b = copy.copy(a)
  또는
  b = a[:]

> 깊은 복사(를 하게되면 a와 b의 value가 독립적으로 작용)
  b = copy.deepcopy(a)


- sort
list.sort()
list.sort(reverse = True)





# 2차원 리스트의 생성
map = [[0]*10 for i in range(10)]                   ---> 10 X 10 2차원 배열 생성
map = [[0]*10] * 10                                 ---> same
map = [[0 for i in range(10)] for i in range(10)]   ---> same




# 2차원 리스트의 최댓값 구하기
maxi = max(map(max, graph))




# 2차원 리스트를 인자로 넘겨줄 때!!!!
무조건 Deepcopy를 해서 쓰자!!!!!!

def dfs(graph):
    temp = copy.deepcopy(graph)


혹은 한 함수 안에서 여러번 인자로 넘겨줄 때

def dfs(graph):
    temp = copy.deepcopy(graph)
    // 이 때, temp를 매번 다시 받아줘야함
    a = up(temp)
    temp = copy.deepcopy(graph)
    b = up(temp)
    temp = copy.deepcopy(graph)
    c = up(temp)
    temp = copy.deepcopy(graph)
    d = up(temp)
    temp = copy.deepcopy(graph)






# 2차원 리스트의 동적 할당
map = []                    // 배열 생성
map.append([1,2,3])         // 배열을 map에 append      ----> result : [[1,2,3]]

or

map = []                    // 배열 생성
map.append([])              // 빈 배열을 map에 append
map[0].append(1)            // append된 배열을 찾아가 value를 append
map[0].append(2)
map[0].append(3)            ----> result : [[1,2,3]]





# 2차원 리스트 정보 입력 받기
n, m = map(int, input().split())
graph = []
for i in range(n):
    graph.append(list(map(int, input())))




# 2차원 리스트의 회전

- 90도 (규칙성만 기억하면 180, 270도 해결 가능)
def rotate_90(m):
    N = len(m)
    ret = [[0] * N for _ in range(N)]
    

    for r in range(N):
        for c in range(N):
            ret[c][N-1-r] = m[r][c]
    return ret
    ---- 설명 : https://shoark7.github.io/programming/algorithm/rotate-2d-array -----





# dictionary

- 선언
dic = {}

- 접근
value = dic["noa"]   <----- 'noa'의 쌍을 반환 e.g) {'noa':1, 'kafka':2} 이면 1을 반환

- 데이터 변경
dic['noa'] = 3

- 데이터 삭제
del dic['noa']

- 존재여부 확인
if 'noa' in dic : <-------true or false



# dictionary를 grapb(BFS)에서 최적화 하는 방법
dic = {}
dic['좌표데이터' : min 방문 횟수]
BFS를 반복하며 찾고자 하는 좌표가 dic에 없으면, depth            ---> dic['x,y'] = depth
                                     있으면, depth의 대소비교   ---> if dic['x,y'] > depth : dic['x,y'] = depth






# 순열과 조합

- import
from itertools import permutation

- 순열 Usage
data = [1, 2, 3]
list(map(''.join, permutations(data)))    <----- 1,2,3 / 1,3,2 / 2,1,3 / 2,3,1 / 3,1,2 / 3,2,1
list(map(''.join, permutations(data), 2)) <----- 1,2 / 1,3 / 2,1 / 2,3 / 3,1 / 3,2

- 조합 Usage
data = [1, 2, 3]
num = 3 (or 2...)
list(itertools.combinations(data, num))

- 재귀함수로 Factorial 구현하기
def factorial(n):
    if n<=1:
        return 1
    return n * factorial(n-1)




# DFS 
1. Stack 을(를) 기본으로 구현 (FILO)------list
stack = []

2. 재귀함수(Recursive Function) 사용

3. Process
    1) 탐색 노드를 스택에 삽입하고 방문처리.
    2) 스택의 최상단 노드에 방문하지 않은 인접노드가 하나라도 있으면 그 노드를 스택에 넣고 방문처리. 
                          방문하지않은 인접 노드가 없으면 스택에서 최상단 노드를 꺼냄.
    3) 더 이상 2번과정을 수행할 수 없을 때까지 반복.
    
4. 예제 소스
def dfs(graph, v, visited):
    # 현재 노드를 방문처리
    visited[v] = true
    # 현재 노드와 연결된 다른 노드를 재귀적 방문
    for i in graph[v]:
        if not visited[i]:
            dfs(graph, i, visited)
            
            

# BFS 
1. Queue 을(를) 기본으로 구현 (FIFO)------dequeue()
from collections import deque
queue = deque()
queue.append(5) //insert
queue.popleft() //delete
queue.reverse() //reverse

*** deque()의 경우 연결리스트로 구성되어 있기 때문에 pop(0)의 경우 O(1)의 시간으로 가능. but List Type은 하나씩 앞으로 다 땡겨야함 ***

2. 재귀함수(Recursive Function) 사용

3. Process
    1) 탐색 노드를 큐에 삽입하고 방문처리.
    2) 큐에서 노드를 꺼낸 뒤, 해당 노드의 인접노드 중 방문하지 않은 노드를 모두 큐에 삽입하고 방문처리.
    3) 더 이상 2번과정을 수행할 수 없을 때까지 반복.
    
4. 예제 소스
def bfs(graph, start, visited):
    # 큐 구현
    queue = deque([start])
    # 현재 노드를 방문처리
    visited[start] = true
    # 큐가 빌 때까지 반복
    while queue:
        v = queue.popleft()
        for i in graph[v]:
            if not visited[i]:
                queue.append(i)
                visited[i] = True
                
5. Dictonary를 이용해서 depth 최적화하면 DP와 같은 원리 적용
